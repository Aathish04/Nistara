from logging import getLogger, basicConfig, INFO
from os import environ

import json
import hashlib 

import time
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory
from datetime import datetime,timedelta
from dotenv import load_dotenv

# from bge import model
from sentence_transformers import SentenceTransformer
from logging import DEBUG
load_dotenv()
basicConfig(level=DEBUG)
logger = getLogger(__name__)
INSTANCEID:int = int(environ.get('INSTANCEID', -2))
UNMATCHED_MATCHER_ID=-1
SIMILARITY_THRESHOLD = 0.7
# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-nistaradb.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("NistaraDB-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()
session.row_factory = dict_factory

logger.info("Connected to Cassandra cluster.")

def getSimilarity(requestedItem, donatedItem):
    logger.info(f"Comparing {requestedItem} and {donatedItem}")
    # "'item_name':'{requestedItem}'"
    requestedItemEmbedding = model.encode(f"'item_name':'{requestedItem}'",normalize_embeddings=False)
    donatedItemEmbedding = model.encode(f"'item_name':'{donatedItem}'",normalize_embeddings=False)
    similarity = model.similarity(requestedItemEmbedding,donatedItemEmbedding)
    logger.debug(f"Comparison Score of {requestedItem} and {donatedItem}: {similarity}")
    return similarity

def getAllRequests():
    query = "SELECT requestid FROM main.requests WHERE requesttype IN (?) ALLOW FILTERING"
    prepared_statement = session.prepare(query)
    allRequestIds = session.execute(prepared_statement, ('REQUEST_ITEM',), trace=True)
    filteredreqs = [i['requestid'] for i in allRequestIds]
    return filteredreqs

def getAndMatchAllRequests():
    allrequestids = getAllRequests()
    logger.info("Retrieved all request IDs")

    for requestid in allrequestids:
        time.sleep(2)
        logger.debug(f"Processing request ID: {requestid}")
        
        query = "SELECT * from main.requests where requestid = ?"
        prepared_statement = session.prepare(query)
        result = session.execute(prepared_statement, (requestid,), trace=True)
        logger.debug(f"Executed query for request ID {requestid}")
        
        request = result.one()
        
        if request:
            logger.debug(f"Retrieved request: {request}")
            if request['matcherid'] in (UNMATCHED_MATCHER_ID,INSTANCEID):
                logger.info(f"Request ID {requestid} has no matcher (matcherid={UNMATCHED_MATCHER_ID})")
                
                query = 'UPDATE main.REQUESTS SET matcherid = ? where requestid = ?;'
                prepared_statement = session.prepare(query)
                session.execute(prepared_statement,(INSTANCEID,request["requestid"]),trace=True)
                logger.info(f"Acquired Request {requestid} for Matcher {INSTANCEID}")
                
                
                request_class = request['class']
                query = f'SELECT * FROM main.donation WHERE class = ? AND matcherid = ? AND isComplete = ? ALLOW FILTERING'
                prepared_statement = session.prepare(query)
                classed_donations = session.execute(prepared_statement, (request_class,UNMATCHED_MATCHER_ID,False), trace=True)
                logger.debug(f"Executed query for classed donations for request class {request_class}")
                print(classed_donations.one())
                
                if not classed_donations.current_rows:
                    logger.warning(f"NO RELEVANT DONATIONS FOR REQUEST CLASS {request_class}!")
                    query = 'UPDATE main.REQUESTS SET matcherid = ? where requestid = ?;'
                    prepared_statement = session.prepare(query)
                    session.execute(prepared_statement,(UNMATCHED_MATCHER_ID,request["requestid"]),trace=True)
                    logger.info(f"Released Request {requestid} for Matcher {INSTANCEID}")
                else:
                    
                    donation_match = max(classed_donations, key=lambda donation: getSimilarity(request['item'], donation['donatingitem']))
                    logger.info(f"Best donation match found: {donation_match}")
                    if getSimilarity(request['item'],donation_match['donatingitem']) > SIMILARITY_THRESHOLD:
                        logger.info(f"Found Match: {request['requestid']},{donation_match['donationid']}",)
                        query = 'UPDATE main.REQUESTS SET isComplete = ? where requestid = ?;'
                        prepared_statement = session.prepare(query)
                        session.execute(prepared_statement,(True,request["requestid"]),trace=True)

                        query = 'UPDATE main.DONATION SET matcherid = ? where donationid = ?;'
                        prepared_statement = session.prepare(query)
                        session.execute(prepared_statement,(INSTANCEID,donation_match["donationid"]),trace=True)

                        query = 'UPDATE main.DONATION SET isComplete = ? where donationid = ?;'
                        prepared_statement = session.prepare(query)
                        session.execute(prepared_statement,(True,donation_match["donationid"]),trace=True)

                        query = 'INSERT INTO main.matches (requestid, donationid, matcherid, matchtime, donoracknowledge, requesteracknowledge) VALUES (?,?,?,?,?,?);'
                        prepared_statement = session.prepare(query)
                        session.execute(prepared_statement,(request["requestid"], donation_match["donationid"],INSTANCEID, datetime.utcnow(),False,False))
                        logger.info(f"Updated Database with Match :  {request['requestid']},{donation_match['donationid']}")
                    else:
                        logger.warning(f"NO DONATIONS PASSING THRESHOLD FOR REQUEST {request['requestid']}!")
                        query = 'UPDATE main.REQUESTS SET matcherid = ? where requestid = ?;'
                        prepared_statement = session.prepare(query)
                        session.execute(prepared_statement,(UNMATCHED_MATCHER_ID,request["requestid"]),trace=True)
                        logger.info(f"Released Request {requestid} for Matcher {INSTANCEID}")
            else:
                logger.warning(f"NO UNMATCHED REQUEST WITH ID {requestid}")


if __name__ == "__main__":
    model = SentenceTransformer('./all-mpnet-base-v2')
    while True:
        getAndMatchAllRequests()