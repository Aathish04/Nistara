from os import environ

import json
import hashlib 

from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory
import uuid
import json
import hashlib 
from datetime import datetime
import time
from dotenv import load_dotenv
load_dotenv()

INSTANCEID:int = int(environ.get('INSTANCEID',-2))

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-nistaradb.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("NistaraDB-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()
session.row_factory = dict_factory


def insertData():
    # Insert posts related to disasters
    prepared = session.prepare("INSERT INTO main.posts (postid, userid, username, profilephoto, classifier, geolocation, isclassified, multimediaurl, textualinfo, timestamp, tag) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")

    # Data to be inserted
    posts = [
        (str(uuid.uuid4()), str(uuid.uuid4()), 'user1', None, -1, (37.7749, -122.4194), False, ['url1'], 'Request for food and water supplies to assist affected families.', datetime.utcnow(), None),
        (str(uuid.uuid4()), str(uuid.uuid4()), 'user2', None, -1, (29.7604, -95.3698), False, ['url2'], 'Urgent need for hygiene products including soap and sanitizers.', datetime.utcnow(), None),
        (str(uuid.uuid4()), str(uuid.uuid4()), 'user3', None, -1, (40.7128, -74.0060), False, ['url3'], 'Emergency lighting and communication devices needed for affected areas.', datetime.utcnow(), None),
        (str(uuid.uuid4()), str(uuid.uuid4()), 'user4', None, -1, (34.0522, -118.2437), False, ['url4'], 'Request for medicines and first aid kits.', datetime.utcnow(), 'MEDICINE'),
        (str(uuid.uuid4()), str(uuid.uuid4()), 'user5', None, -1, (37.7749, -122.4194), False, ['url5'], 'Need tools and equipment for debris removal and rescue operations.', datetime.utcnow(), None),
        (str(uuid.uuid4()), str(uuid.uuid4()), 'user6', None, -1, (34.0522, -118.2437), False, ['url6'], 'Request for clothing and shelter materials for displaced persons.', datetime.utcnow(), None),
        (str(uuid.uuid4()), str(uuid.uuid4()), 'user7', None, -1, (40.7128, -74.0060), False, ['url7'], 'Safety and protection gear required for volunteers.', datetime.utcnow(), None),

        (str(uuid.uuid4()), str(uuid.uuid4()), 'user8', None, -1, (37.7749, -122.4194), False, ['url8'], 'Request for evacuation assistance for elderly residents.', datetime.utcnow(), None),
        (str(uuid.uuid4()), str(uuid.uuid4()), 'user9', None, -1, (29.7604, -95.3698), False, ['url9'], 'Searching for missing person: John Doe, last seen near the river.', datetime.utcnow(), None),
    ]

    # Insert each post
    for post in posts:
        session.execute(prepared, post)

    print("Posts inserted successfully.")    
def getUnclassifiedPostInformation():
    query = f"SELECT * FROM main.POSTS WHERE classifier=? AND isclassified=? LIMIT 1 ALLOW FILTERING"
    prepared_statement = session.prepare(query)
    row = session.execute(prepared_statement,(-1,False),trace=True)
    print(row[0])
    try:
        row_entry = row[0]
        query = f"UPDATE main.POSTS SET classifier=? WHERE postid=?"
        prepared_statement = session.prepare(query)
        session.execute(prepared_statement,(INSTANCEID,row_entry["postid"]),trace=True)
        query=f'SELECT classifier FROM MAIN.POSTS WHERE POSTID=?'
        prepared_statement = session.prepare(query)
        print("Executed.")
        time.sleep(10)
        result = session.execute(prepared_statement,(row_entry["postid"],),trace=True)
        print(result)
        return row_entry

    except IndexError:
        print("All posts are classified!")
        return None


def putExtractedInformation(extracted_info, post_data):
    # Extract information from parameters
    category = str(extracted_info['category'])
    userid = str(post_data['userid'])
    multimediaurl = post_data['multimediaurl']
    postid = str(post_data['postid'])
    profilephoto = post_data['profilephoto']
    textualinfo = post_data['textualinfo']
    username = post_data['username']
    isComplete = False
    timestamp = post_data['timestamp']
    geolocation = post_data['geolocation']


    # Generate requestID (example with hashlib.sha256)
    combined = {**post_data, **extracted_info}
    combined_str = str(combined).encode()
    result = hashlib.sha256(combined_str)
    __id = result.hexdigest()

    print(extracted_info)
    print(post_data)


    if category == 'OFFER':
        for item in extracted_info['items']:
            combined_per_item = {**post_data, **item}
            combined_per_item_str = str(combined_per_item).encode()
            result = hashlib.sha256(combined_per_item_str)
            donationid = result.hexdigest()

            item_name = item['itemName']
            quantity = item['quantity']

            prepared = session.prepare("INSERT INTO main.donation (donationid, donatingitem, geolocation,iscomplete,postid,quantity,userid,username,profilephoto,timestamp,textualinfo,class) VALUES (?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?);")
            session.execute(prepared, (str(donationid), item_name,geolocation,False,postid,quantity,str(userid),username,profilephoto,timestamp,textualinfo,category))

        isClassified = True
        update_query = f"UPDATE main.posts SET isclassified = {isClassified}, classifier = 1, tag = '{category}'  WHERE postid = '{postid}';"
        session.execute(update_query)
    
    elif category == 'INFORMATION':
        # prepared = session.prepare("INSERT INTO main.information (postid, geolocation,multimediaurl,textualinfo,userid) VALUES (?, ?, ?, ?, ?);")
        # session.execute(prepared, (postid,post_data['geolocation'],multimediaurl,post_data['textualinfo'],userid))

        isClassified = True
        update_query = f"UPDATE main.posts SET isclassified = {isClassified}, classifier = 1, tag = '{category}' WHERE postid = '{postid}';"
        session.execute(update_query)

    elif category == 'REQUEST_EVACUATION':

        prepared = session.prepare("INSERT INTO main.requests (requestid, requesttype,postid,userid,item,quantity,class,geolocation,iscomplete,username,profilephoto,timestamp,textualinfo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
        combined = {**post_data, **extracted_info}
        combined_str = str(combined).encode()
        result = hashlib.sha256(combined_str)
        requestid = result.hexdigest()
        session.execute(prepared, (requestid,category,postid,userid,None,None,None,geolocation,False,username,profilephoto,timestamp,textualinfo))

        isClassified = True
        update_query = f"UPDATE main.posts SET isclassified = {isClassified}, classifier = 1, tag = '{category}' WHERE postid = '{postid}';"
        session.execute(update_query)

    elif category == 'REQUEST_SEARCH':

        prepared = session.prepare("INSERT INTO main.requests (requestid, requesttype,postid,userid,item,quantity,class,geolocation,iscomplete,username,profilephoto,timestamp,textualinfo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
        combined = {**post_data, **extracted_info}
        combined_str = str(combined).encode()
        result = hashlib.sha256(combined_str)
        requestid = result.hexdigest()
        session.execute(prepared, (requestid,category,postid,userid,None,None,None,geolocation,False,username,profilephoto,timestamp,textualinfo))

        isClassified = True
        update_query = f"UPDATE main.posts SET isclassified = {isClassified}, classifier = 1, tag = '{category}'  WHERE postid = '{postid}';"
        session.execute(update_query)
    
    elif category == 'REQUEST_ITEM':

        for item in extracted_info['items']:
            combined_per_item = {**post_data, **item}
            combined_per_item_str = str(combined_per_item).encode()
            result = hashlib.sha256(combined_per_item_str)
            requestid = result.hexdigest()

            item_name = item['itemName']
            quantity = item['quantity']
            class_ = item['class']

            prepared = session.prepare("INSERT INTO main.requests (requestid, requesttype,postid,userid,item,quantity,class,geolocation,iscomplete,username,profilephoto,timestamp,textualinfo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
            session.execute(prepared, (requestid,category,postid,userid,item_name,quantity,class_,geolocation,False,username,profilephoto,timestamp,textualinfo))
       
        isClassified = True
        update_query = f"UPDATE main.posts SET isclassified = {isClassified}, classifier = 1, tag = '{category}'  WHERE postid = '{postid}';"
        session.execute(update_query)



    





    # if extracted_info['category'] == 'REQUEST_FIRST_AID' or extracted_info['category'] == 'REQUEST_ITEM' or extracted_info['category'] == 'REQUEST_EVACUATION' or extracted_info['category'] == 'REQUEST_SEARCH':



    #     query = f"INSERT INTO main.requests(requestid,requesttype,postid,userid,requireditem,geolocation,iscomplete) VALUES('{__id}', '{category}', '{postid}', '{userid}', '{items}', {post_data['geolocation']}, {isComplete});"
    #     session.execute(query)

    # elif extracted_info['category'] == 'OFFER':
    #     query = f"INSERT INTO main.donations(donationid,donatingitem,geolocation,iscomplete,postid,quantity,userid) VALUES('{__id}', '{extracted_info['items']['itemName']}', {post_data['geolocation']}, '{isComplete}', '{postid}', {extracted_info['items']['quantity']}, {isComplete});"
    #     session.execute(query)        
    # elif extracted_info['category'] == 'INFORMATION':
    #     table = "information"

    

    # # Update isclassified flag in main.posts
    # isClassified = True
    # update_query = f"UPDATE main.posts SET isclassified = {isClassified}, classifier = 1 WHERE postid = '{postid}';"
    # session.execute(update_query)
    
