# from fastapi import FastAPI

# app = FastAPI()
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory
import json
import hashlib 
  


# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-nistaradb.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("NistaraDB-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()
session.row_factory = dict_factory




data = {
    "userID": 808,
    "classifier": -1,
    "isclassified": False,
    "textualInfo": "We have baby formula and diapers available for families in need. Pick up at 808 Charity Blvd.",
    "timestamp": 1720264740379,  # This is a Unix timestamp in milliseconds
    "geoLocation": (25.7617, -80.1918)  # Coordinates for Miami, FL
}
# result = hashlib.sha256(str(data).encode())
# id = result.hexdigest()

# query = f"INSERT INTO main.posts (postid,classifier,geolocation,isclassified,textualinfo,timestamp,userid) VALUES ('{id}',{-1},{data['geoLocation']},{False},'{data['textualInfo']}',{data['timestamp']},{data['userID']});"
# session.execute(query,trace=True)

def getUnclassifiedPostInformation():
    classifier_value = -1
    isclassified_value = False
    query = f"SELECT * FROM main.POSTS WHERE classifier = {classifier_value} AND isclassified = {isclassified_value} LIMIT 1 ALLOW FILTERING ;"
    row = session.execute(query,trace=True)

    try:
        row_entry = row[0]
        return row_entry

    except IndexError:
        print("All posts are classified!")
        return None


def putExtractedInformation(extracted_info, post_data):
    # Extract information from parameters
    category = str(extracted_info['category'])
    userid = str(post_data['userid'])
    items =  json.dumps(extracted_info['items'], indent=2)
    postid = str(post_data['postid'])
    isComplete = False

    # Generate requestID (example with hashlib.sha256)
    combined = {**post_data, **extracted_info}
    combined_str = str(combined).encode()
    result = hashlib.sha256(combined_str)
    __id = result.hexdigest()

    print(items)

    # if extracted_info['category'] == 'REQUEST_FIRST_AID' or extracted_info['category'] == 'REQUEST_ITEM' or extracted_info['category'] == 'REQUEST_EVACUATION' or extracted_info['category'] == 'REQUEST_SEARCH':



    #     query = f"INSERT INTO main.requests(requestid,requesttype,postid,userid,requireditem,geolocation,iscomplete) VALUES('{__id}', '{category}', '{postid}', '{userid}', '{items}', {post_data['geolocation']}, {isComplete});"
    #     session.execute(query)

    # elif extracted_info['category'] == 'OFFER':
    #     query = f"INSERT INTO main.donations(donationid,donatingitem,geolocation,iscomplete,postid,quantity,userid) VALUES('{__id}', '{extracted_info['items']['itemName']}', {post_data['geolocation']}, '{isComplete}', '{postid}', {extracted_info['items']['quantity']}, {isComplete});"
    #     session.execute(query)        
    # elif extracted_info['category'] == 'INFORMATION':
    #     table = "information"

    

    # # Update isclassified flag in main.posts
    # isClassified = True
    # update_query = f"UPDATE main.posts SET isclassified = {isClassified}, classifier = 1 WHERE postid = '{postid}';"
    # session.execute(update_query)
    
